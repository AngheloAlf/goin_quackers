from pathlib import Path
import re
import sys

regex = re.compile(r"[0-9]+: (?P<address>[0-9a-fA-F]{8})\s+(?P<size>[0-9]+)\s+(?P<type>[^ ]+)\s+(?P<bind>.+?)\s+DEFAULT.+5 (?P<name>.+)")

ADDRESS = 0x00200000
START = 0x000100

syms: list[tuple[int, int, str, str, str]] = []

with Path("tools/elf_syms.us.txt").open() as f:
    for line in f:
        m = regex.match(line.strip())
        if m is None:
            continue
        address = int(m["address"], 16)
        size = int(m["size"])
        typ = m["type"]
        bind = m["bind"]
        name = m["name"]

        if not name.endswith(".c") and not name.endswith(".cpp"):
            continue

        syms.append((address, size, typ, bind, name))

syms.sort()

known_files: list[tuple[int, str, str]] = [
    (0x000100, "asm", "main/000100"),
    (0x009D78, "asm", "main/009D78"),
    (0x009EC8, "asm", "main/009EC8"),
    (0x009F30, "asm", "main/009F30"),
    (0x00A190, "asm", "main/00A190"),
    (0x00A250, "asm", "main/00A250"),
    (0x00A318, "asm", "main/00A318"),
    (0x00A500, "asm", "main/00A500"),
    (0x00A608, "asm", "main/00A608"),
    (0x00A8B8, "asm", "main/00A8B8"),
    (0x00A950, "asm", "main/00A950"),
    (0x00AB38, "asm", "main/00AB38"),
    (0x00B658, "asm", "main/00B658"),
    (0x00BA68, "asm", "main/00BA68"),
    (0x00BFC0, "asm", "main/00BFC0"),
    (0x00C2F0, "asm", "main/00C2F0"),
    (0x00C6D8, "asm", "main/00C6D8"),
    (0x00C6E8, "asm", "main/00C6E8"),
    (0x00C6F8, "asm", "main/00C6F8"),
    (0x00C760, "asm", "main/00C760"),
    (0x00C778, "asm", "main/00C778"),
    (0x00C7A0, "asm", "main/00C7A0"),
    (0x0114D8, "asm", "main/0114D8"),
    (0x011968, "asm", "main/011968"),
    (0x011B68, "asm", "main/011B68"),
    (0x012928, "asm", "main/012928"),
    (0x013490, "asm", "main/013490"),
    (0x014020, "asm", "main/014020"),
    (0x014040, "asm", "main/014040"),
    (0x014290, "asm", "main/014290"),
    (0x0144C0, "asm", "main/0144C0"),
    (0x014D50, "asm", "main/014D50"),
    (0x0150D0, "asm", "main/0150D0"),
    (0x015340, "asm", "main/015340"),
    (0x015678, "asm", "main/015678"),
    (0x015718, "asm", "main/015718"),
    (0x0158F8, "asm", "main/0158F8"),
    (0x015E08, "asm", "main/015E08"),
    (0x016830, "asm", "main/016830"),
    (0x016F60, "asm", "main/016F60"),
    (0x017DC0, "asm", "main/017DC0"),
    (0x018618, "asm", "main/018618"),
    (0x018BE0, "asm", "main/018BE0"),
    (0x018E78, "asm", "main/018E78"),
    (0x019448, "asm", "main/019448"),
    (0x019848, "asm", "main/019848"),
    (0x019C20, "asm", "main/019C20"),
    (0x01A110, "asm", "main/01A110"),
    (0x01AE38, "asm", "main/01AE38"),
    (0x01B358, "asm", "main/01B358"),
    (0x01B660, "asm", "main/01B660"),
    (0x01BA90, "asm", "main/01BA90"),
    (0x01BE30, "asm", "main/01BE30"),
    (0x01C6C0, "asm", "main/01C6C0"),
    (0x01CAA0, "asm", "main/01CAA0"),
    (0x01CBD8, "asm", "main/01CBD8"),
    (0x01CE28, "asm", "main/01CE28"),
    (0x01D990, "asm", "main/01D990"),
    (0x01DB68, "asm", "main/01DB68"),
    (0x01DFE0, "asm", "main/01DFE0"),
    (0x01E138, "asm", "main/01E138"),
    (0x01EA88, "asm", "main/01EA88"),
    (0x01EB90, "asm", "main/01EB90"),
    (0x01EE28, "asm", "main/01EE28"),
    (0x01EFE8, "asm", "main/01EFE8"),
    (0x01F030, "asm", "main/01F030"),
    (0x01F138, "asm", "main/01F138"),
    (0x01F170, "asm", "main/01F170"),
    (0x01F190, "asm", "main/01F190"),
    (0x01F368, "asm", "main/01F368"),
    (0x01F3B0, "asm", "main/01F3B0"),
    (0x01F3E8, "asm", "main/01F3E8"),
    (0x01F410, "asm", "main/01F410"),
    (0x01F610, "asm", "main/01F610"),
    (0x01F7C8, "asm", "main/01F7C8"),
    (0x01F8C0, "asm", "main/01F8C0"),
    (0x01F950, "asm", "main/01F950"),
    (0x01FBF8, "asm", "main/01FBF8"),
    (0x01FC28, "asm", "main/01FC28"),
    (0x01FD10, "asm", "main/01FD10"),
    (0x01FD30, "asm", "main/01FD30"),
    (0x01FD58, "asm", "main/01FD58"),
    (0x01FE40, "asm", "main/01FE40"),
    (0x01FE68, "asm", "main/01FE68"),
    (0x01FFC8, "asm", "main/01FFC8"),
    (0x0200B8, "asm", "main/0200B8"),
    (0x020140, "asm", "main/020140"),
    (0x020230, "asm", "main/020230"),
    (0x020388, "asm", "main/020388"),
    (0x0204B0, "asm", "main/0204B0"),
    (0x0205F8, "asm", "main/0205F8"),
    (0x020A28, "asm", "main/020A28"),
    (0x020B38, "asm", "main/020B38"),
    (0x020C38, "asm", "main/020C38"),
    (0x020D38, "asm", "main/020D38"),
    (0x021240, "asm", "main/021240"),
    (0x021260, "asm", "main/021260"),
    (0x021278, "asm", "main/021278"),
    (0x021298, "asm", "main/021298"),
    (0x0212C0, "asm", "main/0212C0"),
    (0x021380, "asm", "main/021380"),
    (0x0213D8, "asm", "main/0213D8"),
    (0x0227C0, "asm", "main/0227C0"),
    (0x0227D0, "asm", "main/0227D0"),
    (0x022880, "asm", "main/022880"),
    (0x022988, "asm", "main/022988"),
    (0x022A90, "asm", "main/022A90"),
    (0x022AD8, "asm", "main/022AD8"),
    (0x022D30, "asm", "main/022D30"),
    (0x022D68, "asm", "main/022D68"),
    (0x022DF0, "asm", "main/022DF0"),
    (0x022F10, "asm", "main/022F10"),
    (0x0233A0, "asm", "main/0233A0"),
    (0x023830, "asm", "main/023830"),
    (0x023890, "asm", "main/023890"),
    (0x023990, "asm", "main/023990"),
    (0x023D68, "asm", "main/023D68"),
    (0x023E00, "asm", "main/023E00"),
    (0x023E18, "asm", "main/023E18"),
    (0x023F08, "asm", "main/023F08"),
    (0x023F68, "asm", "main/023F68"),
    (0x0240B8, "asm", "main/0240B8"),
    (0x0240F0, "asm", "main/0240F0"),
    (0x024AC0, "asm", "main/024AC0"),
    (0x024B00, "asm", "main/024B00"),
    (0x024BE0, "asm", "main/024BE0"),
    (0x024C78, "asm", "main/024C78"),
    (0x024D28, "asm", "main/024D28"),
    (0x024E30, "asm", "main/024E30"),
    (0x024EF0, "asm", "main/024EF0"),
    (0x024F00, "asm", "main/024F00"),
    (0x025F20, "asm", "main/025F20"),
    (0x025FB0, "asm", "main/025FB0"),
    (0x0269D8, "asm", "main/0269D8"),
    (0x026A18, "asm", "main/026A18"),
    (0x026A78, "asm", "main/026A78"),
    (0x026AA8, "asm", "main/026AA8"),
    (0x027018, "asm", "main/027018"),
    (0x0271B0, "asm", "main/0271B0"),
    (0x0271F8, "asm", "main/0271F8"),
    (0x027258, "asm", "main/027258"),
    (0x0275A8, "asm", "main/0275A8"),
    (0x027628, "asm", "main/027628"),
    (0x027700, "asm", "main/027700"),
    (0x027790, "asm", "main/027790"),
    (0x027900, "asm", "main/027900"),
    (0x0279B8, "asm", "main/0279B8"),
    (0x027B00, "asm", "main/027B00"),
    (0x027C18, "asm", "main/027C18"),
    (0x027C78, "asm", "main/027C78"),
    (0x027DB0, "asm", "main/027DB0"),
    (0x027E08, "asm", "main/027E08"),
    (0x027FC8, "asm", "main/027FC8"),
    (0x028020, "asm", "main/028020"),
    (0x028F78, "asm", "main/028F78"),
    (0x0291E8, "asm", "main/0291E8"),
    (0x029440, "asm", "main/029440"),
    (0x029498, "asm", "main/029498"),
    (0x0294F8, "asm", "main/0294F8"),
    (0x029518, "asm", "main/029518"),
    (0x029538, "asm", "main/029538"),
    (0x0297B0, "asm", "main/0297B0"),
    (0x02B0D0, "asm", "main/02B0D0"),
    (0x02BCE0, "asm", "main/02BCE0"),
    (0x02BD38, "asm", "main/02BD38"),
    (0x02BE50, "asm", "main/02BE50"),
    (0x02BEB0, "asm", "main/02BEB0"),
    (0x02BFC0, "asm", "main/02BFC0"),
    (0x02C6B0, "asm", "main/02C6B0"),
    (0x02C710, "asm", "main/02C710"),
    (0x02C750, "asm", "main/02C750"),
    (0x02C840, "asm", "main/02C840"),
    (0x02C938, "asm", "main/02C938"),
    (0x02C9D0, "asm", "main/02C9D0"),
    (0x02CAB0, "asm", "main/02CAB0"),
    (0x02D118, "asm", "main/02D118"),
    (0x02D178, "asm", "main/02D178"),
    (0x02D748, "asm", "main/02D748"),
    (0x02DC88, "asm", "main/02DC88"),
    (0x02E980, "asm", "main/02E980"),
    (0x02F560, "asm", "main/02F560"),
    (0x031F98, "asm", "main/031F98"),
    (0x033028, "asm", "main/033028"),
    (0x035468, "asm", "main/035468"),
    (0x16F280, "textbin", "main/16F280"),
    (0x170C20, "textbin", "main/170C20"),
    (0x171350, "data", "main/000100"),
    (0x171370, "data", "main/009D78"),
    (0x171390, "data", "main/00A950"),
    (0x171440, "data", "main/00C778"),
    (0x171530, "data", "main/00C7A0"),
    (0x171548, "data", "main/011968"),
    (0x1715F8, "data", "main/012928"),
    (0x171640, "data", "main/014020"),
    (0x171F10, "data", "main/014040"),
    (0x171F90, "data", "main/0144C0"),
    (0x171F98, "data", "main/0158F8"),
    (0x171FA0, "data", "main/016830"),
    (0x171FA8, "data", "main/016F60"),
    (0x171FB0, "data", "main/017DC0"),
    (0x171FB8, "data", "main/023D68"),
    (0x1722A8, "data", "main/023E00"),
    (0x1722C0, "data", "main/0240B8"),
    (0x172718, "data", "main/02E980"),
    (0x172788, "data", "main/02F560"),
    (0x1727D0, "data", "main/031F98"),
    (0x17A188, "rodata", "main/009F30"),
    (0x17A1C0, "rodata", "main/00A950"),
    (0x17A2E0, "rodata", "main/00AB38"),
    (0x17A3A0, "rodata", "main/00B658"),
    (0x17A3C0, "rodata", "main/00BA68"),
    (0x17A3D8, "rodata", "main/00C7A0"),
    (0x17A670, "rodata", "main/0114D8"),
    (0x17A688, "rodata", "main/011B68"),
    (0x17A6C0, "rodata", "main/012928"),
    (0x17A768, "rodata", "main/013490"),
    (0x17A8B0, "rodata", "main/0158F8"),
    (0x17A920, "rodata", "main/015E08"),
    (0x17AA88, "rodata", "main/018618"),
    (0x17AA90, "rodata", "main/018BE0"),
    (0x17AAC0, "rodata", "main/018E78"),
    (0x17AC50, "rodata", "main/019448"),
    (0x17AD30, "rodata", "main/019C20"),
    (0x17AE10, "rodata", "main/01A110"),
    (0x17AFE0, "rodata", "main/01AE38"),
    (0x17B230, "rodata", "main/01BE30"),
    (0x17B2B8, "rodata", "main/01C6C0"),
    (0x17B678, "rodata", "main/01CBD8"),
    (0x17B6E0, "rodata", "main/01CE28"),
    (0x17B750, "rodata", "main/01D990"),
    (0x17B7C0, "rodata", "main/01DB68"),
    (0x17B850, "rodata", "main/01E138"),
    (0x17B8A0, "rodata", "main/01EB90"),
    (0x17B8E8, "rodata", "main/01EE28"),
    (0x17B8F8, "rodata", "main/01F190"),
    (0x17B908, "rodata", "main/17B908"),
    (0x17B910, "rodata", "main/01F3B0"),
    (0x17B918, "rodata", "main/01F410"),
    (0x17B928, "rodata", "main/01F610"),
    (0x17B958, "rodata", "main/01F950"),
    (0x17B9B0, "rodata", "main/020140"),
    (0x17B9B8, "rodata", "main/020230"),
    (0x17B9E8, "rodata", "main/020388"),
    (0x17B9F8, "rodata", "main/0204B0"),
    (0x17BA08, "rodata", "main/0205F8"),
    (0x17BA28, "rodata", "main/020A28"),
    (0x17BA38, "rodata", "main/020B38"),
    (0x17BA40, "rodata", "main/020C38"),
    (0x17BA48, "rodata", "main/020D38"),
    (0x17BA68, "rodata", "main/021380"),
    (0x17BB70, "rodata", "main/0213D8"),
    (0x17BBC8, "rodata", "main/023D68"),
    (0x17BBD0, "rodata", "main/023E18"),
    (0x17BC18, "rodata", "main/024F00"),
    (0x17BD40, "rodata", "main/028020"),
    (0x17BE10, "rodata", "main/0297B0"),
    (0x17C020, "rodata", "main/02B0D0"),
    (0x17C490, "rodata", "main/02BFC0"),
    (0x17C590, "rodata", "main/02CAB0"),
    (0x17C690, "rodata", "main/02D178"),
    (0x17C790, "rodata", "main/02D748"),
    (0x17C890, "rodata", "main/02F560"),
    (0x17CC60, "rodata", "main/031F98"),
    (0x17CD60, "rodata", "main/033028"),
    (0x17CF38, "rodata", "main/035468"),
    (0x195F00, "end", "end"),
]

for address, size, typ, bind, name in syms:
    start = address - ADDRESS + START
    # print(f"0x{address:08X}", f"0x{start:06X}", f"0x{size:X}", typ, bind, name)
    # for i, (file_start, file_section, file_name) in enumerate(known_files):

    #assert start >= known_files[0][0], (address, size, typ, bind, name)
    #assert start < known_files[-1][0], (address, size, typ, bind, name)
    #for i in range(len(known_files)-1):
    #    file_start, file_section, file_name = known_files[i]
    #    file_end = known_files[i+1][0]
    #    if start >= file_start and start < file_end:
    #        print(f"      - [0x{file_start:06X}, {file_section}, main/{name}]")
    #        break


